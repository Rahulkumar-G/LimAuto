import React, { useState, useEffect } from 'react';\nimport { AgentProgress } from './AgentProgress';\nimport { useEnhancedWebSocket } from '../src/hooks/useEnhancedWebSocket';\n\ninterface QualityMetrics {\n  overall_score: number;\n  content_depth: number;\n  technical_accuracy: number;\n  expertise_level: number;\n  coherence_score: number;\n  factual_accuracy: number;\n  progression: Array<{\n    timestamp: number;\n    overall_score: number;\n    content_depth: number;\n    technical_accuracy: number;\n  }>;\n}\n\ninterface AgentStatus {\n  agent_name: string;\n  agent_type: string;\n  current_step: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'paused';\n  progress_percent: number;\n  iteration_count: number;\n  max_iterations: number;\n  quality_score: number;\n  start_time: string;\n  estimated_completion: string;\n  domain: string;\n  word_count: number;\n  tokens_used: number;\n  errors: string[];\n  warnings: string[];\n}\n\ninterface DashboardData {\n  agents: Record<string, AgentStatus>;\n  quality_metrics: QualityMetrics | null;\n  workflow_progress: any;\n}\n\nexport const EnhancedDashboard: React.FC = () => {\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [selectedAgent, setSelectedAgent] = useState<string | null>(null);\n  const [showQualityDetails, setShowQualityDetails] = useState(false);\n  \n  const { messages, isConnected, connectionStatus } = useEnhancedWebSocket('ws://localhost:8765', {\n    onMessage: (message) => {\n      try {\n        const data = JSON.parse(message.message);\n        \n        if (data.type === 'complete_status') {\n          setDashboardData(data.data);\n        } else if (data.type === 'agent_status') {\n          setDashboardData(prev => ({\n            ...prev!,\n            agents: {\n              ...prev?.agents || {},\n              [data.data.agent_name]: data.data\n            }\n          }));\n        } else if (data.type === 'quality_metrics') {\n          setDashboardData(prev => ({\n            ...prev!,\n            quality_metrics: data.data\n          }));\n        } else if (data.type === 'workflow_progress') {\n          setDashboardData(prev => ({\n            ...prev!,\n            workflow_progress: data.data\n          }));\n        }\n      } catch (e) {\n        console.warn('Failed to parse dashboard message:', e);\n      }\n    }\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return '✅';\n      case 'running': return '🔄';\n      case 'failed': return '❌';\n      case 'paused': return '⏸️';\n      default: return '⏳';\n    }\n  };\n\n  const getQualityColor = (score: number) => {\n    if (score >= 0.9) return 'text-green-600';\n    if (score >= 0.7) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const formatDuration = (startTime: string) => {\n    try {\n      const start = new Date(startTime);\n      const now = new Date();\n      const diff = now.getTime() - start.getTime();\n      const minutes = Math.floor(diff / 60000);\n      const seconds = Math.floor((diff % 60000) / 1000);\n      return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    } catch {\n      return 'N/A';\n    }\n  };\n\n  const calculateFinalScore = (qualityMetrics: QualityMetrics | null) => {\n    if (!qualityMetrics) return 0;\n    \n    const baseScore = qualityMetrics.overall_score * 800;\n    let bonusPoints = 0;\n    \n    if (qualityMetrics.content_depth > 0.95) bonusPoints += 40;\n    if (qualityMetrics.technical_accuracy > 0.98) bonusPoints += 40;\n    if (qualityMetrics.factual_accuracy > 0.95) bonusPoints += 30;\n    if (qualityMetrics.coherence_score > 0.90) bonusPoints += 30;\n    if (qualityMetrics.expertise_level > 0.90) bonusPoints += 30;\n    \n    // World-class bonus\n    if (qualityMetrics.content_depth > 0.90 && \n        qualityMetrics.technical_accuracy > 0.90 && \n        qualityMetrics.factual_accuracy > 0.90 && \n        qualityMetrics.coherence_score > 0.90) {\n      bonusPoints += 100;\n    }\n    \n    return Math.min(Math.round(baseScore + bonusPoints), 1500);\n  };\n\n  if (!dashboardData) {\n    return (\n      <div className=\"min-h-screen bg-gray-100 p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <h2 className=\"text-xl font-semibold text-gray-700\">Connecting to BookLLM...</h2>\n            <p className=\"text-gray-500 mt-2\">\n              Status: {connectionStatus} | Connected: {isConnected ? 'Yes' : 'No'}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const agents = Object.values(dashboardData.agents || {});\n  const runningAgents = agents.filter(a => a.status === 'running');\n  const completedAgents = agents.filter(a => a.status === 'completed');\n  const failedAgents = agents.filter(a => a.status === 'failed');\n  const finalScore = calculateFinalScore(dashboardData.quality_metrics);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-800\">\n                BookLLM Dashboard\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                {dashboardData.workflow_progress?.book_title || 'Book Generation in Progress'}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className={`flex items-center space-x-2 px-3 py-1 rounded-full ${\n                isConnected ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n              }`}>\n                <div className={`w-2 h-2 rounded-full ${\n                  isConnected ? 'bg-green-500' : 'bg-red-500'\n                }`}></div>\n                <span className=\"text-sm font-medium\">\n                  {isConnected ? 'Live Updates' : 'Disconnected'}\n                </span>\n              </div>\n              \n              {finalScore > 0 && (\n                <div className={`px-4 py-2 rounded-lg font-bold text-lg ${\n                  finalScore >= 1200 ? 'bg-yellow-100 text-yellow-800' :\n                  finalScore >= 1000 ? 'bg-green-100 text-green-800' :\n                  finalScore >= 800 ? 'bg-blue-100 text-blue-800' :\n                  'bg-gray-100 text-gray-800'\n                }`}>\n                  Score: {finalScore}/1000\n                  {finalScore >= 1200 && ' 🌟'}\n                  {finalScore >= 1000 && finalScore < 1200 && ' 🏆'}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Main Progress */}\n        <AgentProgress showDetailed={true} />\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"text-2xl font-bold text-blue-600\">{agents.length}</div>\n            <div className=\"text-sm text-gray-600\">Total Agents</div>\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"text-2xl font-bold text-green-600\">{completedAgents.length}</div>\n            <div className=\"text-sm text-gray-600\">Completed</div>\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"text-2xl font-bold text-yellow-600\">{runningAgents.length}</div>\n            <div className=\"text-sm text-gray-600\">Running</div>\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"text-2xl font-bold text-red-600\">{failedAgents.length}</div>\n            <div className=\"text-sm text-gray-600\">Failed</div>\n          </div>\n        </div>\n\n        {/* Quality Metrics */}\n        {dashboardData.quality_metrics && (\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-semibold text-gray-800\">Quality Metrics</h2>\n              <button\n                onClick={() => setShowQualityDetails(!showQualityDetails)}\n                className=\"px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded hover:bg-blue-200\"\n              >\n                {showQualityDetails ? 'Hide Details' : 'Show Details'}\n              </button>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-4\">\n              {[\n                { key: 'overall_score', label: 'Overall' },\n                { key: 'content_depth', label: 'Depth' },\n                { key: 'technical_accuracy', label: 'Technical' },\n                { key: 'expertise_level', label: 'Expertise' },\n                { key: 'coherence_score', label: 'Coherence' },\n                { key: 'factual_accuracy', label: 'Factual' }\n              ].map(({ key, label }) => {\n                const score = dashboardData.quality_metrics![key as keyof QualityMetrics] as number;\n                return (\n                  <div key={key} className=\"text-center\">\n                    <div className={`text-2xl font-bold ${getQualityColor(score)}`}>\n                      {(score * 100).toFixed(1)}%\n                    </div>\n                    <div className=\"text-sm text-gray-600\">{label}</div>\n                    <div className=\"w-full bg-gray-200 h-2 rounded-full mt-1\">\n                      <div \n                        className={`h-2 rounded-full ${\n                          score >= 0.9 ? 'bg-green-500' :\n                          score >= 0.7 ? 'bg-yellow-500' : 'bg-red-500'\n                        }`}\n                        style={{ width: `${score * 100}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {showQualityDetails && dashboardData.quality_metrics.progression.length > 0 && (\n              <div className=\"border-t pt-4\">\n                <h3 className=\"text-lg font-medium text-gray-700 mb-2\">Quality Progression</h3>\n                <div className=\"overflow-x-auto\">\n                  <div className=\"flex space-x-2 pb-2\">\n                    {dashboardData.quality_metrics.progression.slice(-10).map((point, idx) => (\n                      <div key={idx} className=\"flex-shrink-0 bg-gray-50 p-2 rounded text-xs\">\n                        <div className=\"font-medium\">\n                          {new Date(point.timestamp * 1000).toLocaleTimeString()}\n                        </div>\n                        <div className=\"text-gray-600\">\n                          Overall: {(point.overall_score * 100).toFixed(1)}%\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Agent Details */}\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Agent Status</h2>\n          \n          <div className=\"grid gap-4\">\n            {agents.map((agent) => (\n              <div \n                key={agent.agent_name}\n                className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                  selectedAgent === agent.agent_name \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => setSelectedAgent(\n                  selectedAgent === agent.agent_name ? null : agent.agent_name\n                )}\n              >\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-2xl\">{getStatusIcon(agent.status)}</span>\n                    <div>\n                      <div className=\"font-medium text-gray-800\">\n                        {agent.agent_name}\n                        <span className=\"ml-2 text-sm text-gray-500\">({agent.agent_type})</span>\n                      </div>\n                      <div className=\"text-sm text-gray-600\">{agent.current_step}</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right space-y-1\">\n                    <div className=\"text-sm font-medium\">\n                      {agent.progress_percent.toFixed(1)}%\n                    </div>\n                    {agent.status === 'running' && (\n                      <div className=\"text-xs text-gray-500\">\n                        {formatDuration(agent.start_time)}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Progress Bar */}\n                <div className=\"mt-3 w-full bg-gray-200 h-2 rounded-full\">\n                  <div \n                    className={`h-2 rounded-full transition-all ${\n                      agent.status === 'completed' ? 'bg-green-500' :\n                      agent.status === 'failed' ? 'bg-red-500' :\n                      agent.status === 'running' ? 'bg-blue-500' :\n                      'bg-gray-400'\n                    }`}\n                    style={{ width: `${Math.min(agent.progress_percent, 100)}%` }}\n                  ></div>\n                </div>\n                \n                {/* Expanded Details */}\n                {selectedAgent === agent.agent_name && (\n                  <div className=\"mt-4 border-t pt-4 space-y-3\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-500\">Domain:</span>\n                        <div className=\"font-medium\">{agent.domain}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Words:</span>\n                        <div className=\"font-medium\">{agent.word_count.toLocaleString()}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Tokens:</span>\n                        <div className=\"font-medium\">{agent.tokens_used.toLocaleString()}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Quality:</span>\n                        <div className={`font-medium ${getQualityColor(agent.quality_score)}`}>\n                          {(agent.quality_score * 100).toFixed(1)}%\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {agent.iteration_count > 0 && (\n                      <div className=\"bg-gray-50 p-3 rounded\">\n                        <div className=\"text-sm font-medium text-gray-700\">Iterations</div>\n                        <div className=\"text-sm text-gray-600\">\n                          {agent.iteration_count} / {agent.max_iterations} completed\n                        </div>\n                      </div>\n                    )}\n                    \n                    {(agent.errors.length > 0 || agent.warnings.length > 0) && (\n                      <div className=\"space-y-2\">\n                        {agent.errors.map((error, idx) => (\n                          <div key={idx} className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n                            ❌ {error}\n                          </div>\n                        ))}\n                        {agent.warnings.map((warning, idx) => (\n                          <div key={idx} className=\"text-sm text-yellow-600 bg-yellow-50 p-2 rounded\">\n                            ⚠️ {warning}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedDashboard;"